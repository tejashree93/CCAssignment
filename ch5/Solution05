When we subtract 1 from a number n we have 2 cases:
case 1:
  least significant bit of binary representation of n is 1
  then we get (n-1)'s binary representation by flipping the least significant bit to 0.
    n = abcd1
  n-1 = abcd0
case 2: 
  least significant bit of binary representation of n is 0
  then we get (n-1)'s binary representation by flipping all least significant bits with value 0 until we find the least significant 1
  we flip the first least significant 1 to 0  and we thus get n-1
  n = abcd100
  n-1 = abcd011

now, (n & (n-1)) == 0
means that there are no bits with value 1 in common between n and n-1
This means that abcd are 0s, so the number n should be like 100, hence n has a value which is a power of 2.
This is true for both cases.

Hence, (n & (n-1)) == 0 is used to check if n is a power of 2 or if n is 0.
